{:name "oauth2"
 ; build
 :lazy false
 :cljs-namespace [token.login.dialog
                  token.user
                  token.user.ui]
 :cljs-ns-bindings {;'modular.oauth2 {'provider-status-grid modular.oauth2.token.ui/provider-status-grid
                    ;                 'user-login modular.oauth2.user.view/user-login}
                    ; make sure the namespaces in sci and cljs are identical
                    ;'modular.oauth2.user.view {'user-login modular.oauth2.user.view/user-login}
                    ;'modular.oauth2.token.ui {'provider-status-grid modular.oauth2.token.ui/provider-status-grid}
                    token.login.dialog {'show-login-dialog  token.login.dialog/show-login-dialog}
                    token.user {'get-user token.user/get-user
                                'set-user! token.user/set-user!
                                'init-user! token.user/init-user!}
                    token.user.ui {'user-icon-with-login token.user.ui/user-icon-with-login}
                    token.store.ui {'provider-status-grid token.store.ui/provider-status-grid} 
                    }
 ; run 
 :api-routes {; oauth redirect is stateless,
              ; all other endpoints are implemented via clj-service which can be started at runtime 
              ; if the service gets started.
              "oauth2/" {;["start/" :provider] {:get modular.oauth2.handler/handler-oauth2-start-wrapped}
                         ;"token"  {:get modular.oauth2.handler/token-handler-wrapped}
                             ;  ["redirect/" :provider] {:get :oauth2/redirect}
                         ;"save-token" {:post modular.oauth2.handler/handler-oauth2-save-wrapped}
                         ["redirect/" :provider] token.oauth2.handler/handler-oauth2-redirect-wrapped  ;  either client OR server side
                         }}

:cljs-service {;:config-fn webly.spa.service/cljs-config-simple
               :start-fn token.user/init-user!
               :default-config {}}


 }

